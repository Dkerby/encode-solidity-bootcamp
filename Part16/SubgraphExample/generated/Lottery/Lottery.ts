// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogAddressPaid extends ethereum.Event {
  get params(): LogAddressPaid__Params {
    return new LogAddressPaid__Params(this);
  }
}

export class LogAddressPaid__Params {
  _event: LogAddressPaid;

  constructor(event: LogAddressPaid) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogGuessMade extends ethereum.Event {
  get params(): LogGuessMade__Params {
    return new LogGuessMade__Params(this);
  }
}

export class LogGuessMade__Params {
  _event: LogGuessMade;

  constructor(event: LogGuessMade) {
    this._event = event;
  }

  get teamAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogResetOracle extends ethereum.Event {
  get params(): LogResetOracle__Params {
    return new LogResetOracle__Params(this);
  }
}

export class LogResetOracle__Params {
  _event: LogResetOracle;

  constructor(event: LogResetOracle) {
    this._event = event;
  }

  get _newSeed(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LogTeamCorrectGuess extends ethereum.Event {
  get params(): LogTeamCorrectGuess__Params {
    return new LogTeamCorrectGuess__Params(this);
  }
}

export class LogTeamCorrectGuess__Params {
  _event: LogTeamCorrectGuess;

  constructor(event: LogTeamCorrectGuess) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class LogTeamRegistered extends ethereum.Event {
  get params(): LogTeamRegistered__Params {
    return new LogTeamRegistered__Params(this);
  }
}

export class LogTeamRegistered__Params {
  _event: LogTeamRegistered;

  constructor(event: LogTeamRegistered) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class Lottery__getTeamDetailsResult {
  value0: string;
  value1: Address;
  value2: BigInt;

  constructor(value0: string, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Lottery__teamsResult {
  value0: string;
  value1: string;
  value2: BigInt;

  constructor(value0: string, value1: string, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Lottery__thisLotteryResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Lottery extends ethereum.SmartContract {
  static bind(address: Address): Lottery {
    return new Lottery("Lottery", address);
  }

  admins(param0: Address): boolean {
    let result = super.call("admins", "admins(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_admins(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("admins", "admins(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTeamCount(): BigInt {
    let result = super.call("getTeamCount", "getTeamCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTeamCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTeamCount", "getTeamCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTeamDetails(_num: BigInt): Lottery__getTeamDetailsResult {
    let result = super.call(
      "getTeamDetails",
      "getTeamDetails(uint256):(string,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_num)]
    );

    return new Lottery__getTeamDetailsResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_getTeamDetails(
    _num: BigInt
  ): ethereum.CallResult<Lottery__getTeamDetailsResult> {
    let result = super.tryCall(
      "getTeamDetails",
      "getTeamDetails(uint256):(string,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_num)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lottery__getTeamDetailsResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  makeAGuess(_team: Address, _guess: BigInt): boolean {
    let result = super.call(
      "makeAGuess",
      "makeAGuess(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_team),
        ethereum.Value.fromUnsignedBigInt(_guess)
      ]
    );

    return result[0].toBoolean();
  }

  try_makeAGuess(_team: Address, _guess: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "makeAGuess",
      "makeAGuess(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_team),
        ethereum.Value.fromUnsignedBigInt(_guess)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payoutWinningTeam(): boolean {
    let result = super.call(
      "payoutWinningTeam",
      "payoutWinningTeam():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_payoutWinningTeam(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "payoutWinningTeam",
      "payoutWinningTeam():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  teamAddresses(param0: BigInt): Address {
    let result = super.call(
      "teamAddresses",
      "teamAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_teamAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "teamAddresses",
      "teamAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  teams(param0: Address): Lottery__teamsResult {
    let result = super.call("teams", "teams(address):(string,string,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Lottery__teamsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt()
    );
  }

  try_teams(param0: Address): ethereum.CallResult<Lottery__teamsResult> {
    let result = super.tryCall(
      "teams",
      "teams(address):(string,string,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lottery__teamsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt()
      )
    );
  }

  thisLottery(): Lottery__thisLotteryResult {
    let result = super.call(
      "thisLottery",
      "thisLottery():(uint256,uint256)",
      []
    );

    return new Lottery__thisLotteryResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_thisLottery(): ethereum.CallResult<Lottery__thisLotteryResult> {
    let result = super.tryCall(
      "thisLottery",
      "thisLottery():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lottery__thisLotteryResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get _adminAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class InitialiseLotteryCall extends ethereum.Call {
  get inputs(): InitialiseLotteryCall__Inputs {
    return new InitialiseLotteryCall__Inputs(this);
  }

  get outputs(): InitialiseLotteryCall__Outputs {
    return new InitialiseLotteryCall__Outputs(this);
  }
}

export class InitialiseLotteryCall__Inputs {
  _call: InitialiseLotteryCall;

  constructor(call: InitialiseLotteryCall) {
    this._call = call;
  }

  get seed(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class InitialiseLotteryCall__Outputs {
  _call: InitialiseLotteryCall;

  constructor(call: InitialiseLotteryCall) {
    this._call = call;
  }
}

export class MakeAGuessCall extends ethereum.Call {
  get inputs(): MakeAGuessCall__Inputs {
    return new MakeAGuessCall__Inputs(this);
  }

  get outputs(): MakeAGuessCall__Outputs {
    return new MakeAGuessCall__Outputs(this);
  }
}

export class MakeAGuessCall__Inputs {
  _call: MakeAGuessCall;

  constructor(call: MakeAGuessCall) {
    this._call = call;
  }

  get _team(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _guess(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MakeAGuessCall__Outputs {
  _call: MakeAGuessCall;

  constructor(call: MakeAGuessCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PayoutWinningTeamCall extends ethereum.Call {
  get inputs(): PayoutWinningTeamCall__Inputs {
    return new PayoutWinningTeamCall__Inputs(this);
  }

  get outputs(): PayoutWinningTeamCall__Outputs {
    return new PayoutWinningTeamCall__Outputs(this);
  }
}

export class PayoutWinningTeamCall__Inputs {
  _call: PayoutWinningTeamCall;

  constructor(call: PayoutWinningTeamCall) {
    this._call = call;
  }
}

export class PayoutWinningTeamCall__Outputs {
  _call: PayoutWinningTeamCall;

  constructor(call: PayoutWinningTeamCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RegisterTeamCall extends ethereum.Call {
  get inputs(): RegisterTeamCall__Inputs {
    return new RegisterTeamCall__Inputs(this);
  }

  get outputs(): RegisterTeamCall__Outputs {
    return new RegisterTeamCall__Outputs(this);
  }
}

export class RegisterTeamCall__Inputs {
  _call: RegisterTeamCall;

  constructor(call: RegisterTeamCall) {
    this._call = call;
  }

  get _walletAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _teamName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _password(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RegisterTeamCall__Outputs {
  _call: RegisterTeamCall;

  constructor(call: RegisterTeamCall) {
    this._call = call;
  }
}
